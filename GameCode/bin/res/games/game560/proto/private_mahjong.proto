package private_mahjong;

//为防止编号冲突，扩展协议命名需从0x00002001或0x00003001之类的位置开始

enum MSG_HEADER {
    //client2server
    C_S_READY_GAME = 0x00002004;
	
    //C_S_TOTAL_BALANCE_DATA = 0x00002007;
	C_S_DOUBLE = 0x00002008;
	C_S_PREACTIONEDDATA = 0x00002009;
	C_S_TRUSTEE = 0x00002010;
	C_S_DO_ACTION2 = 0x000020011;
	
	C_S_ROBLANDLORD = 0x000020012;
	
	
    //server2client


    S_C_GET_RESULT = 0x000030003;      // 结果返回
    S_C_TOTAL_REPORT = 0x000030004;    // 大局结算


    S_C_READY_GAME = 0x00003000d;
    S_C_READY_GAME_DATA = 0x00003000e;

    S_C_DEAL_CARDS = 0x000030010;
    S_C_TURN_ACTION = 0x000030011;
    S_C_DO_ACTION_RESULT = 0x000030012;
    S_C_ADDL_GAME_INFO = 0x000030013;
	
	
	S_C_DOUBLE = 0x000030015;
	S_C_DOUBLE_RESULT = 0x000030016;
	S_C_PREACTIONEDDATA = 0x000030017;
	S_C_TRUSTEE = 0x000030018;
	
	S_C_ROBLANDLORD = 0x000030019;
	S_C_ROBLANDLORDRESULT = 0x000030020;
	S_C_SCOREDATA = 0x000030021;
	
	S_C_WAIT_TIME = 0x000030090;
	S_C_SWAP_DEALER = 0x000030091;//换位
    S_C_TOTAL_BALANCE_DATA = 0x000030092; // 总战绩
    S_C_MESSAGE = 0x000030093; // 消息
    S_C_ADDL_REPORT_CUR_GAME = 0x000030094;  //赣州单局结算报表需要的数据
    S_C_OLD_ADDL_REPORT_CUR_GAME = 0x000030095;  //赣州上一局单局结算报表需要的数据
}
                                

//message PlayerInfo {                               
//    required fixed32 side = 1;                     
//    required string nickname = 2;                  
//    optional fixed32 level = 3;                    
//    optional sfixed64 coin = 4;                    
//    optional fixed32 vipLevel = 5;                 
//    optional string ip = 6;                        
//    optional fixed32 sex = 7;                      
//    optional fixed32 roomCards = 8;                
//    optional string headImgUrl = 9;                
//    optional fixed32 id = 10; // id                
//	                                                 
//    optional string account = 12;                  
//    optional bool isonline = 13;                   
//}                                                  
//                                                   
//// 个人各项数据                                    
//message BullResult {                               
//    required BULL_INFO_TYPE  type = 1;             
//    required fixed32  count = 2;                   
//}                                                  
//                                                   
//message S_C_TotalReport{                           
//    required fixed32 side = 1;  // 位置信息        
//    repeated BullResult bull_info = 2;             
//    repeated PlayerInfo base_info = 3;             
//    required fixed32 dealer_count = 4;  //当庄次数 
//    required fixed32 win_count = 5; // 胜利次数    
//}                                                  



// 准备帧
message C_S_ReadyGame{

}

message S_C_ReadyGame{
    required fixed32 side = 1; // 玩家位置
}

// 准备按钮
message S_C_ReadyGameData{
	optional fixed32 wait_time = 1; // 倒计时
}


message S_C_WaitTime{
	optional fixed32 wait_time = 1; // 倒计时
	repeated fixed32 sides = 2 ;
}

// 总战绩
message C_S_TotalBalanceData{
}

message S_C_TotalBalanceData{
        message BalanceData{
            repeated string descs = 1; //
            required fixed32 side = 2; //位置
            required string nickname = 3; //昵称
            required sfixed32 score = 4; //分数
            optional string headImgUrl = 5; //头像
        }
        repeated BalanceData data = 1;
        required fixed32 total_count = 2; //总局数
}

message S_C_Message{
    required fixed32 side = 1; // 玩家位置
    required string msg = 2; // 消息
    optional fixed32 msg_type = 3; // 1 代表牛牛抽奖机会
}


message S_C_AddlReportCurGame {
	repeated string datas = 1;    // 对于斗地主来说，该值为小局的底分、炸弹、（反）春天、总倍数
	repeated fixed32 extendData = 2;   // [1] 为春天    [2] 为反春天
}

//上局结算数据 单局报表的额外信息  Reports of additional
message S_C_OldAddlReportCurGame{
    optional S_C_AddlReportCurGame addlReportCurGame = 1;
}



//开始游戏时发送手牌
message S_C_DealCards{
    required string cards = 1; //手牌
    required fixed64 timestamp = 2;
    optional bool isReDeal = 3; //是否重新发牌
}

//Action的信息
message Action {
    //0:过，1:出牌
    required fixed32 action = 1;
    //抽象的牌字串列表,（根据不同规则或action的需要传不同的牌字串列表）
    repeated string datas = 2;
}

//可选哪些Action
message S_C_TurnAction {
    required fixed32 side = 1;
    repeated Action action = 2;
    optional fixed32 num = 3; //action编号
}


message S_C_DoActionResult{
    required fixed32 side = 1;
    required fixed32 action = 2;
    //抽象的牌字串列表,
    repeated string datas = 3;
}

//用于刷新时额外的信息:当前出牌情况、等待谁出牌、自己的手牌及别人剩余牌的张数
message S_C_AddlGameInfo{
	required fixed32 actionSide = 1;
	optional fixed32 num = 2; //action编号 当刷新玩家是当前出牌玩家时才赋值
	//手牌
    message PlayerRestoreData{
        required fixed32 side = 1; //位置
        //玩家已有操作的数据抽象[$手牌列表,$..,...]
        repeated string cardDatas = 2;
        optional bool isOnline = 3; //是否在线
    }
	repeated PlayerRestoreData playerRestoreData = 3;
	//出牌
	message LastActionedData {
		required fixed32 side = 1;
		//出的牌数据，['3a,3b,3c']
		repeated string cards = 2;
		
		optional fixed32 callType = 3;
		optional fixed32 callData = 4;
		
	}
	repeated LastActionedData lastActionedData = 4;
	

	repeated PlayerBombData playerBombData = 5;
	
	//抢地主信息
	optional S_C_RobLandlord robLandlord = 6;
	//地主信息
	optional LandlordData landlordData = 7;
}

//玩家出炸弹数量
message PlayerBombData{
	required fixed32 side = 1; //放炸弹玩家的边
	required fixed32 bombCount = 2; //放炸弹玩家的炸弹个数
}

//例如：斗地主选择出牌或者过
message C_S_DoAction2{
    required fixed32 action = 1;
    //抽象的牌字串列表,例如：斗地主使用癞子时,[出的牌字串,使用的癞子牌,癞子代表的牌]
    // 如：4是癞子，['3a,3b,3c,4w', '3w']表示炸弹四张3
    //  ['4w,4w,7a,7b,8a,8b', '9w,9w']表示789连对
    repeated string tiles = 2;
    required fixed32 num = 3; //action编号
}


message S_C_Double{
	message DoubleInfo{
		required fixed32 side = 1;
		repeated fixed32 choice = 2;
	}
    repeated DoubleInfo doubleInfo = 1;
}

message C_S_Double{
	required fixed32 choice = 1;
}

message S_C_DoubleResult{
	message DoubleInfo{
		required fixed32 side = 1;
		required fixed32 choice = 2;
	}
    repeated DoubleInfo doubleInfo = 1;
}

message C_S_PreActionedData{

}

message S_C_PreActionedData{
	message PreActionedData {
		required fixed32 side = 1;
		//出的牌数据，['3a,3b,3c']
		repeated string cards = 2;
	}
	repeated PreActionedData preActionedData = 4;
}


message C_S_Trustee{
	required bool isTruster = 1;
}

message S_C_Trustee{
	message TrusteeInfo {
		required fixed32 side = 1;
		required bool isTruster = 2;
	}
	repeated TrusteeInfo trusteeInfo = 1;
}




enum CALL_TYPE {
    CALL_LANDLORD = 0; //叫地主
    CALL_SCORE = 1; //叫分
    ROB_LANDLORD = 2; //抢地主
}

//抢地主
message C_S_RobLandlord {
    //0:叫地主，1:叫分，2:抢地主
    required CALL_TYPE choseType = 1;
    //如果是叫地主，0是不叫，1是叫
    //如果是叫分，0是不叫，1是叫1分，2是叫2分，3是叫3分
    //如果是抢地主，0是不抢，1是抢
    required fixed32 operate = 2;
}


//抢地主
message S_C_RobLandlord {
    required fixed32 side = 1;
    //0:叫地主，1:叫分
    optional CALL_TYPE choseType = 2;
    repeated fixed32 canChooseScore = 3;
}

//广播 叫地主/叫分/抢地主 操作的结果
message S_C_RobLandlordResult {
    required fixed32 side = 1; //做操作的边
    required CALL_TYPE choseType = 2;
    required fixed32 operate = 3;
    // 地主是否已确定，如果确定了发LandlordData
    required bool isConfirmLandlord = 4;
    optional LandlordData landlordData = 5;
}

//地主数据
message LandlordData {
    required fixed32 landlordSide = 1; //地主的边
    required string holeCards = 2; //地主底牌
    required float baseScore = 3; //底分
    required fixed32 multiple = 4; //倍数
    repeated string wildCard = 5; //癞子，万能牌
}


//刷新分数数据
//做了放炸弹或者其他的改变了倍数或底分的操作之后发
message S_C_ScoreData {
    required float baseScore = 1; //底分
    required fixed32 multiple = 2; //倍数
    required bool isBomb = 3; //是否是放炸弹
    optional PlayerBombData playerBombData = 4;
}



