//import "poker.proto";
package baccarat.proto;

enum MSG_HEADER {
    C_S_JOINGAME = 0x00006001; //进入游戏
    C_S_GAMESTART = 0x00006002; //开始游戏
    C_S_GRAB_DEALER_VOTE = 0x00006003;//玩家抢庄
    C_S_BID = 0x00006004; //下注

    //server2client
    S_C_CONNECTED = 0x00006011; //登录结果
    S_C_JOIN_ROOM = 0x00006012; //有玩家加入房间
    S_C_DISCONNECTED = 0x00006013; //被断开链接
    S_C_GRABDEALER_VOTERESULT = 0x00006015;   //抢庄结果
    S_C_AFTER_START = 0x00006016;//开始下注
    S_C_BID_END = 0x00006017;//结算
    S_C_BID = 0x00006018; //下注
    S_C_SWAPDEALER = 0x00006019;//换位（庄家换人，导致玩家的位置发生变动）
    S_C_SET_START = 0x00006020; //小局开始
    S_C_SENDSIGN = 0x00006021;//发送玩家标记
    S_C_START_GRABDEALER = 0x00006022;    //开始抢庄
    S_C_BALANCEBACCARAT = 0x00006023; //输赢数据
    S_C_READY_GAMESTARTBACCARAT = 0x00006024; //游戏准备好
    S_C_AFTERREFRESh = 0x00006025; //断线重连
    S_C_AFTERBID = 0x00006026; //下注后得到的信息
    //----新加协议
    S_C_STARTBID = 0x00006027;//----开始下注 
    S_C_MATCH_TIME = 0x00006028;//----匹配时间
}

// client to server socket

message C_S_JoinGame{
    required string sid=1; //用户sid，用户加入游戏时传sid，后端判断人数是否大于2，大于2则自动开始游戏
}

//下注(客户端) , 每一次下注都要记录，其他玩家同步显示不同玩家的下注情况
message C_S_bid {
    required fixed32 place = 1;//下注的位置
    required fixed32 denomination = 2 ;//下注面额
    required fixed32 qty = 3;//下注的数量
}

message C_S_GrabDealer_Vote{
    optional bool result = 1; //是否抢庄(玩家选择的结果)
}



// server to client socket

message S_C_MatchTime{
    //匹配时间
    required fixed32 wait_time = 1;
}

message S_C_StartBid {
    // 开始下注
    repeated fixed32 bidValue = 1; // 筹码面额
    repeated fixed32 areaLimit = 2 ;// 区域下注限制
    required fixed32 bidTime = 3 ; // 下注时间
}


//下注(服务端)
message S_C_bid {
    required fixed32 place = 1;//下注的位置
    required fixed32 denomination = 2;//下注面额
    required fixed32 qty = 3;//下注的数量
    required fixed32 chair = 4;//玩家位置
    required fixed32 totalplacemoney = 5;//下注位置的总额
    required fixed32 subtotalmoney = 6;//下注位置的自己的总额
    required fixed32 playertotalmoney = 7;//玩家下注总额
    optional fixed32 selflimit = 8 ;//自己的下注限额
    optional fixed32 totallimit = 9 ;//总下注限额
}

//游戏开始
message S_C_SetStart{
    repeated fixed32 dicePoints = 1; //骰子点数，用于庄家确定
    required fixed32 dealer = 2; //庄家
    required fixed64 timestamp = 3;
    required fixed32 dealerCount = 4;
}

// 抢庄信息
message S_C_GrabDealer_VoteResult{
    required fixed32 side = 1;  //位置(抢庄成功的位置)
    required string nickname = 2; //昵称
    repeated fixed32 BeDealer = 3; //参与抢庄的人 []
}

//玩家开始抢庄
message S_C_Start_GrabDealer{
    required bool isGrab = 1;   //玩家是否已抢庄)(True已做抢庄选择,False为未选择)
    required fixed64 waitTime = 2; //抢庄时间(或剩余抢庄时间)
    optional bool isCanGrab = 3;//该玩家是否可抢庄
}

//玩家信息
message PlayerInfo {
    required fixed32 side = 1; //位置
    required string nickname = 2; //昵称
    optional float coin = 4; //金币，预留
    optional string ip = 6; //ip
    optional fixed32 sex = 7; //性别
    optional fixed32 roomCards = 8; //房卡数
    optional string headImgUrl = 9; //头像链接
    optional bool isGM = 10;//是否GM
    optional fixed32 id = 11;
    optional string account = 12;
    optional bool isonline = 13;
}

//换位，庄家换人了，导致玩家位置发生变动
message S_C_SwapDealer{
    required bool result = 1;   //抢庄结果
    required fixed32 myside = 2;    //我的位置
    required string nickname = 3;    //我的昵称
    repeated PlayerInfo playerList = 4;     //所有玩家信息
    repeated fixed32 bidtime = 5; //玩家下注时间
}

enum Sign{
    DoGrab  = 1;    //抢庄
    NotGrab = 2;    //不抢庄
    FullBid = 3;    //满注
    NotBid  = 4;    //弃牌
    //下个版本(当前版本不会出现)
    Viwer   = 5;    //观看
    ReadyNext = 6;  //已准备
    CancelReady = 7;  //取消准备
    ReadyExit = 8;  //准备退出
}

//发送玩家标记
message S_C_SendSign{
    message player_info{
        required fixed32 side = 1;  //位置
        required string nickname = 2; //昵称
        required fixed32 sex = 3;   //性别
        optional Sign sign = 4;   //头衔//标记  //新增
    }
    repeated player_info PlayerInfo = 1;
}

//输赢数据
message S_C_BalanceBaccarat{
    message BalanceData{
        //结算信息归为3类：
        //1分数,2次数,3牌数据
        //此3类数据都根据不同游戏规则组装成对应的列表
        repeated string descs = 1; //结算描述，直接发给客户端显示的结算字符串数组
        repeated fixed32 times = 2;
        required string gold = 3; //输赢后的金额数
        required fixed32 score = 4; //输赢，0输了，1赢了，针对该用户
        required string changegold = 5; //输赢了多少金额
        required string nickname = 6; //昵称
        required fixed32 side = 7; //位置
        optional fixed32 id = 8; //用户id
        optional bool isDealer = 9; //是否庄家
        optional fixed64 timestamp = 10;
        optional string headImgUrl = 11; //头像
        required string cardres = 12; //牌的结果，json数组，x为闲的牌，z为庄的牌
        required string cardrescode = 13; //输赢结果，总的庄闲结果
        required string xzdui = 14;//闲对,1为闲对,0为庄对，2表示不是对子
    }
    required bool isDrawn = 1; //是否流局
    repeated BalanceData setUserDatas = 2; //所有玩家的结算需要数据
}

//刷新，用户断线重连
message S_C_AfterRefresh {
    required fixed64 stage = 1;    //(0:结算阶段,1:抢庄阶段,2:下注阶段,3:倒计时阶段)
    repeated S_C_GrabDealer_VoteResult voteresult = 3;// 抢庄数据
    repeated S_C_bid onbidlist = 2;  //下注数据
    repeated S_C_BalanceBaccarat balance = 4; //结算数据
    optional bool isReady = 5;  //当前玩家是否准备
    required fixed32 leftMS = 6; //剩余时间
    repeated fixed32 bidValue = 7; // 筹码的面值
}

//玩家加入游戏后，给前端发送消息
message S_C_Ready_GameStart_Baccarat{
    required fixed32 leftMS = 1 ;
    optional bool isReady = 2;  //当前玩家是否准备
}

//玩家加入游戏后，给前端发送消息
message S_C_AfterBid{
    required string cardres = 1; //牌的结果，json数组，x为闲的牌，z为庄的牌
    required string cardrescode = 2; //输赢结果，总的庄闲结果
    required string xzdui = 3;//闲对,1为闲对,0为庄对，2表示不是对子
}